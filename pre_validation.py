import pandas as pd
import numpy as np
from pathlib import Path

def validate_excel_for_sql(excel_path, sheet_name):
    """
    Valida un archivo Excel antes de insertarlo en MSSQL
    Identifica problemas potenciales
    """
    print(f"\n{'='*70}")
    print(f"VALIDANDO: {sheet_name}")
    print(f"{'='*70}")
    
    # Leer Excel
    df = pd.read_excel(excel_path, sheet_name=sheet_name)
    
    # 1. INFORMACI√ìN GENERAL
    print(f"\nüìä INFORMACI√ìN GENERAL:")
    print(f"   ‚Ä¢ Total de filas: {len(df)}")
    print(f"   ‚Ä¢ Total de columnas: {len(df.columns)}")
    print(f"   ‚Ä¢ Filas completamente vac√≠as: {df.dropna(how='all').shape[0] - len(df)}")
    
    # 2. AN√ÅLISIS DE COLUMNAS
    print(f"\nüìã AN√ÅLISIS DE NOMBRES DE COLUMNAS:")
    problematic_cols = []
    
    for col in df.columns:
        issues = []
        
        # Verificar caracteres problem√°ticos
        if any(char in str(col) for char in ['√°', '√©', '√≠', '√≥', '√∫', '√±', '√Å', '√â', '√ç', '√ì', '√ö', '√ë']):
            issues.append("acentos")
        
        if '/' in str(col):
            issues.append("slash")
        
        if ' ' in str(col):
            issues.append("espacios")
        
        if any(char in str(col) for char in ['(', ')', '[', ']', '{', '}', '@', '#', '$', '%']):
            issues.append("caracteres especiales")
        
        if len(str(col)) > 128:
            issues.append("nombre muy largo")
        
        if issues:
            print(f"   ‚ö†Ô∏è  '{col}' -> {', '.join(issues)}")
            problematic_cols.append(col)
    
    if not problematic_cols:
        print("   ‚úì Todos los nombres de columnas son seguros")
    
    # 3. AN√ÅLISIS DE DATOS POR COLUMNA
    print(f"\nüîç AN√ÅLISIS DE CALIDAD DE DATOS:")
    
    for col in df.columns:
        null_count = df[col].isnull().sum()
        null_pct = (null_count / len(df)) * 100
        
        # Solo mostrar columnas con problemas
        if null_pct > 50:
            print(f"   ‚ö†Ô∏è  '{col}': {null_pct:.1f}% valores nulos")
        
        # Detectar valores problem√°ticos comunes
        if df[col].dtype == 'object':
            problem_values = df[col].astype(str).isin(['nan', 'NaN', 'NA', 'N/A', '#N/A', '-', '/', '']).sum()
            if problem_values > 0:
                print(f"   ‚ö†Ô∏è  '{col}': {problem_values} valores texto problem√°ticos (NA, -, /, etc)")
        
        # Verificar longitud de strings
        if df[col].dtype == 'object':
            max_length = df[col].astype(str).str.len().max()
            if max_length > 255:
                print(f"   ‚ö†Ô∏è  '{col}': valor m√°s largo = {max_length} caracteres (revisar l√≠mite SQL)")
    
    # 4. AN√ÅLISIS DE COLUMNAS ESPEC√çFICAS SEG√öN HOJA
    print(f"\nüéØ VALIDACIONES ESPEC√çFICAS:")
    
    if sheet_name == 'Centro MTBT':
        validate_centro_mtbt(df)
    elif sheet_name == 'Equipos de maniobras':
        validate_equipos_maniobras(df)
    elif sheet_name == 'Interrupciones':
        validate_interrupciones(df)
    
    # 5. VERIFICAR DUPLICADOS
    print(f"\nüîÑ VERIFICACI√ìN DE DUPLICADOS:")
    duplicates = df.duplicated().sum()
    if duplicates > 0:
        print(f"   ‚ö†Ô∏è  {duplicates} filas completamente duplicadas")
    else:
        print(f"   ‚úì No hay filas duplicadas")
    
    # 6. RESUMEN
    print(f"\n{'='*70}")
    if problematic_cols:
        print(f"‚ö†Ô∏è  ACCI√ìN REQUERIDA: {len(problematic_cols)} columnas necesitan normalizaci√≥n")
        print(f"   Usa el script optimizado para normalizar autom√°ticamente")
    else:
        print(f"‚úì La hoja '{sheet_name}' est√° lista para inserci√≥n")
    print(f"{'='*70}")
    
    return df

def validate_centro_mtbt(df):
    """Validaciones espec√≠ficas para Centro MTBT"""
    
    # Verificar columnas clave
    key_cols = ['C√≥digo Centro MT/BT', 'KVA instalado por transformador', 
                'UTM Centro MT/BT Norte', 'UTM Centro MT/BT Oeste']
    
    for col in key_cols:
        if col in df.columns:
            if col == 'KVA instalado por transformador':
                non_numeric = pd.to_numeric(df[col], errors='coerce').isnull().sum()
                if non_numeric > 0:
                    print(f"   ‚ö†Ô∏è  '{col}': {non_numeric} valores no num√©ricos")
                    # Mostrar ejemplos
                    examples = df[df[col].notna() & pd.to_numeric(df[col], errors='coerce').isna()][col].head(3).tolist()
                    if examples:
                        print(f"      Ejemplos: {examples}")
            
            elif 'UTM' in col:
                # Validar que sean enteros
                non_numeric = pd.to_numeric(df[col], errors='coerce').isnull().sum()
                if non_numeric > 0:
                    print(f"   ‚ö†Ô∏è  '{col}': {non_numeric} valores no num√©ricos para coordenadas")

def validate_equipos_maniobras(df):
    """Validaciones espec√≠ficas para Equipos de maniobras"""
    
    key_cols = ['C√≥digo de Equipo', 'Nivel de tensi√≥n', 'Corriente m√°xima']
    
    for col in key_cols:
        if col in df.columns:
            if col == 'C√≥digo de Equipo':
                # Verificar c√≥digos vac√≠os
                empty = df[col].isnull().sum()
                if empty > 0:
                    print(f"   ‚ö†Ô∏è  '{col}': {empty} c√≥digos vac√≠os (PK no puede ser NULL)")
            
            elif col in ['Nivel de tensi√≥n', 'Corriente m√°xima']:
                non_numeric = pd.to_numeric(df[col], errors='coerce').isnull().sum()
                if non_numeric > 0:
                    print(f"   ‚ö†Ô∏è  '{col}': {non_numeric} valores no num√©ricos")

def validate_interrupciones(df):
    """Validaciones espec√≠ficas para Interrupciones"""
    
    date_cols = ['Fecha y Hora_Inicio', 'Fecha y Hora_Cierre', 'Fecha Notificacion al Usuario']
    
    for col in date_cols:
        if col in df.columns:
            # Intentar convertir a fecha
            invalid_dates = pd.to_datetime(df[col], errors='coerce').isnull().sum()
            total_non_null = df[col].notna().sum()
            
            if invalid_dates > 0 and total_non_null > 0:
                print(f"   ‚ö†Ô∏è  '{col}': {invalid_dates} fechas inv√°lidas de {total_non_null} no-nulas")
                
                # Mostrar ejemplos de fechas problem√°ticas
                problematic = df[df[col].notna() & pd.to_datetime(df[col], errors='coerce').isna()][col].head(3).tolist()
                if problematic:
                    print(f"      Ejemplos: {problematic}")
    
    # Verificar l√≥gica de fechas
    if 'Fecha y Hora_Inicio' in df.columns and 'Fecha y Hora_Cierre' in df.columns:
        inicio = pd.to_datetime(df['Fecha y Hora_Inicio'], errors='coerce')
        cierre = pd.to_datetime(df['Fecha y Hora_Cierre'], errors='coerce')
        
        # Verificar que cierre > inicio
        logic_errors = ((cierre < inicio) & inicio.notna() & cierre.notna()).sum()
        if logic_errors > 0:
            print(f"   ‚ö†Ô∏è  {logic_errors} registros donde Fecha_Cierre < Fecha_Inicio (l√≥gica incorrecta)")
    
    # Verificar columna de c√≥digo de equipo m√∫ltiple
    if 'C√≥digo de Equipo' in df.columns:
        multi_codes = df['C√≥digo de Equipo'].astype(str).str.contains(',', na=False).sum()
        if multi_codes > 0:
            print(f"   ‚ÑπÔ∏è  {multi_codes} registros con m√∫ltiples c√≥digos de equipo (separados por coma)")
            print(f"      La columna 'Primer C√≥digo de Equipo' ser√° creada autom√°ticamente")

# =============================================================================
# EJECUTAR VALIDACI√ìN
# =============================================================================

if __name__ == "__main__":
    # Configurar ruta del archivo
    excel_file = 'Plantilla de Datos Regulatorios Para Sistemas Aislados_RECO_AGOSTO.xlsx'
    
    print("="*70)
    print("VALIDACI√ìN DE DATOS ANTES DE INSERCI√ìN EN MSSQL")
    print("="*70)
    
    # Validar cada hoja
    sheets_to_validate = ['Centro MTBT', 'Equipos de maniobras', 'Interrupciones']
    
    for sheet in sheets_to_validate:
        try:
            df = validate_excel_for_sql(excel_file, sheet)
        except Exception as e:
            print(f"\n‚ùå ERROR validando '{sheet}': {str(e)}")
    
    print("\n" + "="*70)
    print("VALIDACI√ìN COMPLETADA")
    print("="*70)
    print("\nüìù RECOMENDACIONES:")
    print("   1. Corregir todos los warnings (‚ö†Ô∏è) antes de insertar")
    print("   2. Usar el script optimizado para normalizar nombres de columnas")
    print("   3. Revisar que las tablas SQL tengan los tipos de datos correctos")
    print("   4. Considerar agregar constraints (NOT NULL, CHECK) en SQL")
    print("="*70)